{
  "desc": "Provide custom unfurl behavior for user-posted URLs",
  "http_method": "POST",
  "scope": {
    "bot": [
      "links:write"
    ],
    "user": [
      "links:write"
    ]
  },
  "slack_connect_workspaces_allowed": true,
  "json_input_supported": true,
  "rate_limits": "t3",
  "args": {
    "type": "object",
    "required": [
      "token"
    ],
    "properties": {
      "token": {
        "type": "string",
        "subtype": "auth",
        "desc": "Authentication token bearing required scopes. Tokens should be passed as an HTTP Authorization header or alternatively, as a POST parameter.",
        "example": "xxxx-xxxxxxxxx-xxxx"
      },
      "channel": {
        "desc": "Channel ID of the message. Both `channel` and `ts` must be provided together, *or* `unfurl_id` and `source` must be provided together.",
        "type": "string",
        "subtype": "channel"
      },
      "ts": {
        "desc": "Timestamp of the message to add unfurl behavior to.",
        "type": "string"
      },
      "unfurls": {
        "desc": "URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments. Either `unfurls` or `metadata` must be provided.",
        "type": "string"
      },
      "user_auth_message": {
        "desc": "Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior. Provides two buttons, `Not now` or `Never ask me again`.",
        "anyOf": [
          {
            "type": "null"
          },
          {
            "type": "string"
          }
        ]
      },
      "user_auth_required": {
        "default": "0",
        "desc": "Set to `true` or `1` to indicate the user must install your Slack app to trigger unfurls for this domain",
        "type": "boolean"
      },
      "user_auth_url": {
        "desc": "Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded.",
        "example": "https://example.com/onboarding?user_id=xxx",
        "anyOf": [
          {
            "type": "null"
          },
          {
            "type": "string"
          }
        ]
      },
      "user_auth_blocks": {
        "desc": "Provide a JSON based array of structured blocks presented as URL-encoded string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior",
        "schema": "blocks"
      },
      "unfurl_id": {
        "type": "string",
        "desc": "The ID of the link to unfurl. Both `unfurl_id` and `source` must be provided together, *or* `channel` and `ts` must be provided together.",
        "example": "Uxxxxxxx-909b5454-75f8-4ac4-b325-1b40e230bbd8"
      },
      "source": {
        "type": "string",
        "desc": "The source of the link to unfurl. The source may either be `composer`, when the link is inside the message composer, or `conversations_history`, when the link has been posted to a conversation.",
        "example": "composer",
        "enum": [
          "composer",
          "conversations_history"
        ]
      },
      "metadata": {
        "desc": "JSON object with `entity_type` and `entity_payload` fields, presented as a URL-encoded string. Either `unfurls` or `metadata` must be provided.",
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "null"
          }
        ]
      }
    }
  },
  "output": null,
  "errors": {
    "cannot_auth_user": {
      "desc": "The current user cannot be authenticated."
    },
    "cannot_find_channel": {
      "desc": "The specified channel could not be located for this token."
    },
    "cannot_find_message": {
      "desc": "The `ts` value in the request does not match a message."
    },
    "cannot_find_service": {
      "desc": "A record of your app being allowed to unfurl for this workspace could not be found."
    },
    "cannot_parse_attachment": {
      "desc": "The provided `unfurls` argument could not be parsed or understood."
    },
    "cannot_prompt": {
      "desc": "The current user has already interacted with and dismissed a prompt for this application."
    },
    "cannot_unfurl_message": {
      "desc": "The URL cannot be unfurled because the URL provided does not appear in the message."
    },
    "cannot_unfurl_url": {
      "desc": "The URL cannot be unfurled. This error may be returned if you haven't acknowledged a `link_shared` event tied to the same URL. It is also returned when the domain appears in a workspace's administrative blocklists."
    },
    "invalid_unfurl_id": {
      "desc": "The unfurl ID is invalid."
    },
    "invalid_unfurls_format": {
      "desc": "The `unfurls` parameter cannot be JSON-decoded into a map of URLs to attachments."
    },
    "invalid_metadata_format": {
      "desc": "The `metadata` parameter cannot be JSON-decoded into the expected format."
    },
    "invalid_source": {
      "desc": "The unfurl source is invalid."
    },
    "missing_channel": {
      "desc": "The request is missing the `channel` parameter"
    },
    "missing_source": {
      "desc": "The request is missing the `source` parameter."
    },
    "missing_ts": {
      "desc": "The request is missing the `ts` parameter"
    },
    "missing_unfurl_id": {
      "desc": "The request is missing the `unfurl_id` parameter."
    },
    "missing_unfurls": {
      "desc": "The request is missing the `unfurls` parameter."
    },
    "error_processing_metadata": {
      "desc": "The metadata parameter was invalid."
    }
  },
  "examples": {
    "success": {
      "url": "/api/chat.unfurl?token=YOUR_TOKEN",
      "description": "Typical, minimal success response",
      "example": {
        "ok": true
      }
    },
    "error": {
      "url": "/api/chat.unfurl?token=INVALID_TOKEN",
      "description": "Typical error response",
      "example": {
        "ok": false,
        "error": "cannot_unfurl_url"
      }
    }
  }
}